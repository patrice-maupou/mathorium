/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.maupou.mthtype;

import java.util.ArrayList;
import org.maupou.expressions.ExprNode;
import org.maupou.expressions.Expression;
import org.maupou.expressions.Syntax;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.CloneableTopComponent;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.maupou.mthtype//Mth//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "MthTopComponent",
        iconBase = "org/maupou/mthtype/loupesn.gif", 
        persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "org.maupou.mthtype.MthTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_MthAction",
        preferredID = "MthTopComponent")
@Messages({
    "CTL_MthAction=Mth",
    "CTL_MthTopComponent=Mth Window",
    "HINT_MthTopComponent=This is a Mth window"
})
public final class MthTopComponent extends CloneableTopComponent {

    private ArrayList<ExprNode> exprNodes;
    private Syntax syntax;
    private Document document;

    public MthTopComponent() {
        initComponents();
        //setName(Bundle.CTL_MthTopComponent());
        //setToolTipText(Bundle.HINT_MthTopComponent());
    }

    public MthTopComponent(Syntax syntax) {
        this();
        this.syntax = syntax;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        editorPane = new javax.swing.JEditorPane();

        setLayout(new java.awt.BorderLayout());

        jScrollPane.setViewportView(editorPane);

        add(jScrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane editorPane;
    private javax.swing.JScrollPane jScrollPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        if(syntax == null) return;
        Element root = document.getDocumentElement();
        exprNodes = new ArrayList<>();
        NodeList nodes = root.getElementsByTagName("expr");
        for (int i = 0; i < nodes.getLength(); i++) {
      try {
        Element e = (Element) nodes.item(i);
        String type = e.getAttribute("type");
        String etext = e.getFirstChild().getTextContent();
        Expression expr = new Expression(etext, syntax);
        expr.setType(type);
        ArrayList<int[]> parents = new ArrayList<>();
        NodeList nl = e.getElementsByTagName("parents");
        if (nl.getLength() == 1) {
          Element ep = (Element) nl.item(0);
          String[] s = ep.getFirstChild().getTextContent().split(" ");
          for (int j = 0; j < s.length; j++) {
            String[] sp = s[j].split("-");
            int[] p = new int[sp.length];
            for (int k = 0; k < sp.length; k++) {
              p[k] = Integer.parseInt(sp[k]);
            }
            parents.add(p);
          }
        }
        ArrayList<Integer> children = new ArrayList<>();
        nl = e.getElementsByTagName("children");
        if (nl.getLength() == 1) {
          Element ep = (Element) nl.item(0);
          String[] s = ep.getFirstChild().getTextContent().split(" ");
          for (int j = 0; j < s.length; j++) {
            children.add(Integer.parseInt(s[j]));
          }
        }
        String comment = ":";
        nl = e.getElementsByTagName("comments");
        for (int j = 0; j < nl.getLength(); j++) {
          Element c = (Element) nl.item(j);
          comment += c.getTextContent();
        }
        comment += "\n";
        //getjTextArea().append(etext + comment);
        editorPane.setText(editorPane.getText() + etext + comment);        
        ExprNode en = new ExprNode(expr, children, parents, getExprNodes());
        getExprNodes().add(en);
      } catch (Exception ex) {
        Exceptions.printStackTrace(ex);
      }
    }
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    /**
     * @return the exprNodes
     */
    public ArrayList<ExprNode> getExprNodes() {
        return exprNodes;
    }

    public javax.swing.JEditorPane getEditorPane() {
        return editorPane;
    }

    /**
     * @param document the document to set
     */
    public void setDocument(Document document) {
        this.document = document;
    }
}
