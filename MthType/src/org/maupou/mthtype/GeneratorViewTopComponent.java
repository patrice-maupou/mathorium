/*
 * Copyright (C) 2013 Patrice
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package org.maupou.mthtype;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingWorker;
import org.maupou.expressions.*;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.w3c.dom.CDATASection;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.maupou.mthFile//GeneratorView//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "GeneratorViewTopComponent",
        iconBase = "org/math/ExprFile/arrow.png",
        persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "properties", openAtStartup = false)
@ActionID(category = "Window", id = "org.maupou.mthFile.GeneratorViewTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_GeneratorViewAction",
        preferredID = "GeneratorViewTopComponent")
@Messages({
    "CTL_GeneratorViewAction=GeneratorView",
    "CTL_GeneratorViewTopComponent=GeneratorView Window",
    "HINT_GeneratorViewTopComponent=This is a GeneratorView window"
})
public final class GeneratorViewTopComponent extends TopComponent {

    private Syntax syntax;
    private MthTopComponent tc;
    private SyntaxWrite syntaxWrite;
    private ArrayList<Generator> generators;
    private Generator generator;
    private GenItem genItem;
    private ArrayList<ExprNode> exprNodes;
    private HashMap<Expression, Expression> varsToExprs;
    private boolean resultReady;
    private ArrayList<String> varnames;
    private int level, maxsize, limit;

    public GeneratorViewTopComponent() {
        initComponents();
        varsToExprs = new HashMap<>();
        //setName("GeneratorView Window");
        //setToolTipText(Bundle.HINT_GeneratorViewTopComponent());
    }

    public GeneratorViewTopComponent(Syntax syntax) {
        this();
        this.syntax = syntax;
        if (syntax != null) {
            syntaxWrite = syntax.getSyntaxWrite();
            generators = syntax.getGenerators();
            String[] genNnames = new String[generators.size()];
            for (int i = 0; i < generators.size(); i++) {
                genNnames[i] = generators.get(i).getName();
            }
            generatorsBox.setModel(new DefaultComboBoxModel(genNnames));
            generator = generators.get(0);
            updateGenerator(generator);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        title = new javax.swing.JLabel();
        generatorsBox = new javax.swing.JComboBox();
        jSeparator = new javax.swing.JSeparator();
        manuelButton = new javax.swing.JRadioButton();
        autoButton = new javax.swing.JRadioButton();
        genItemBox = new javax.swing.JComboBox();
        genItemNameLabel = new javax.swing.JLabel();
        resultRanges = new javax.swing.JSpinner();
        rangesLabel = new javax.swing.JLabel();
        resultLabel = new javax.swing.JLabel();
        resultField = new javax.swing.JTextField();
        matchesLabel = new javax.swing.JLabel();
        matchesBox = new javax.swing.JComboBox();
        commLabel = new javax.swing.JLabel();
        refCheckBox = new javax.swing.JCheckBox();
        matchCheckBox = new javax.swing.JCheckBox();
        typeCheckBox = new javax.swing.JCheckBox();
        valueLabel = new javax.swing.JLabel();
        valueField = new javax.swing.JTextField();
        okButton = new javax.swing.JButton();
        nbResultSpinner = new javax.swing.JSpinner();
        nbResultsLbl = new javax.swing.JLabel();
        varsLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        varsTable = new javax.swing.JTable();
        levelLabel = new javax.swing.JLabel();
        levelSpinner = new javax.swing.JSpinner();
        goButton = new javax.swing.JButton();

        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(title, org.openide.util.NbBundle.getMessage(GeneratorViewTopComponent.class, "GeneratorViewTopComponent.title.text")); // NOI18N

        generatorsBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        generatorsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatorsBoxActionPerformed(evt);
            }
        });

        buttonGroup.add(manuelButton);
        manuelButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(manuelButton, org.openide.util.NbBundle.getMessage(GeneratorViewTopComponent.class, "GeneratorViewTopComponent.manuelButton.text")); // NOI18N

        buttonGroup.add(autoButton);
        org.openide.awt.Mnemonics.setLocalizedText(autoButton, org.openide.util.NbBundle.getMessage(GeneratorViewTopComponent.class, "GeneratorViewTopComponent.autoButton.text")); // NOI18N

        genItemBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        genItemBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genItemBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(genItemNameLabel, org.openide.util.NbBundle.getMessage(GeneratorViewTopComponent.class, "GeneratorViewTopComponent.genItemNameLabel.text")); // NOI18N

        resultRanges.setValue(1);
        resultRanges.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                resultRangesStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(rangesLabel, org.openide.util.NbBundle.getMessage(GeneratorViewTopComponent.class, "GeneratorViewTopComponent.rangesLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(resultLabel, org.openide.util.NbBundle.getMessage(GeneratorViewTopComponent.class, "GeneratorViewTopComponent.resultLabel.text")); // NOI18N

        resultField.setText(org.openide.util.NbBundle.getMessage(GeneratorViewTopComponent.class, "GeneratorViewTopComponent.resultField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(matchesLabel, org.openide.util.NbBundle.getMessage(GeneratorViewTopComponent.class, "GeneratorViewTopComponent.matchesLabel.text")); // NOI18N

        matchesBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        org.openide.awt.Mnemonics.setLocalizedText(commLabel, org.openide.util.NbBundle.getMessage(GeneratorViewTopComponent.class, "GeneratorViewTopComponent.commLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(refCheckBox, org.openide.util.NbBundle.getMessage(GeneratorViewTopComponent.class, "GeneratorViewTopComponent.refCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(matchCheckBox, org.openide.util.NbBundle.getMessage(GeneratorViewTopComponent.class, "GeneratorViewTopComponent.matchCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(typeCheckBox, org.openide.util.NbBundle.getMessage(GeneratorViewTopComponent.class, "GeneratorViewTopComponent.typeCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(valueLabel, org.openide.util.NbBundle.getMessage(GeneratorViewTopComponent.class, "GeneratorViewTopComponent.valueLabel.text")); // NOI18N

        valueField.setText(org.openide.util.NbBundle.getMessage(GeneratorViewTopComponent.class, "GeneratorViewTopComponent.valueField.text")); // NOI18N
        valueField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueFieldActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(okButton, org.openide.util.NbBundle.getMessage(GeneratorViewTopComponent.class, "GeneratorViewTopComponent.okButton.text")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        nbResultSpinner.setValue(20);

        org.openide.awt.Mnemonics.setLocalizedText(nbResultsLbl, org.openide.util.NbBundle.getMessage(GeneratorViewTopComponent.class, "GeneratorViewTopComponent.nbResultsLbl.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(varsLabel, org.openide.util.NbBundle.getMessage(GeneratorViewTopComponent.class, "GeneratorViewTopComponent.varsLabel.text")); // NOI18N

        varsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "nom", "valeur", "type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        varsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(varsTable);
        varsTable.getColumnModel().getColumn(0).setPreferredWidth(5);
        varsTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(GeneratorViewTopComponent.class, "GeneratorViewTopComponent.varsTable.columnModel.title0")); // NOI18N
        varsTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(GeneratorViewTopComponent.class, "GeneratorViewTopComponent.varsTable.columnModel.title1")); // NOI18N
        varsTable.getColumnModel().getColumn(2).setPreferredWidth(20);
        varsTable.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(GeneratorViewTopComponent.class, "GeneratorViewTopComponent.varsTable.columnModel.title2")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(levelLabel, org.openide.util.NbBundle.getMessage(GeneratorViewTopComponent.class, "GeneratorViewTopComponent.levelLabel.text")); // NOI18N

        levelSpinner.setValue(1);
        levelSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                levelSpinnerStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(goButton, org.openide.util.NbBundle.getMessage(GeneratorViewTopComponent.class, "GeneratorViewTopComponent.goButton.text")); // NOI18N
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(okButton)
                .addGap(223, 223, 223))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(genItemNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(genItemBox, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(rangesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(resultRanges, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(matchesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(matchesBox, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(105, 124, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(generatorsBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(resultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(resultField, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(manuelButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(varsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(commLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(matchCheckBox)
                                        .addGap(47, 47, 47)
                                        .addComponent(refCheckBox)
                                        .addGap(65, 65, 65)
                                        .addComponent(typeCheckBox))
                                    .addComponent(valueField))))
                        .addGap(44, 44, 44))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(autoButton)
                        .addGap(37, 37, 37)
                        .addComponent(nbResultsLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nbResultSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(levelLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(levelSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(goButton)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbResultSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nbResultsLbl)
                    .addComponent(autoButton)
                    .addComponent(levelLabel)
                    .addComponent(levelSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(goButton))
                .addGap(3, 3, 3)
                .addComponent(jSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(manuelButton)
                .addGap(18, 18, 18)
                .addComponent(generatorsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genItemBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genItemNameLabel)
                    .addComponent(resultRanges, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rangesLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(matchesLabel)
                    .addComponent(matchesBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(varsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 97, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commLabel)
                    .addComponent(matchCheckBox)
                    .addComponent(refCheckBox)
                    .addComponent(typeCheckBox))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resultField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resultLabel))
                .addGap(12, 12, 12)
                .addComponent(okButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

  private void genItemBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genItemBoxActionPerformed
      int index = genItemBox.getSelectedIndex();
      genItem = generator.getGenItems().get(index);
      updateGenItem(genItem, 1);
  }//GEN-LAST:event_genItemBoxActionPerformed

    private void updateGenItem(GenItem genItem, int range) {
        ArrayList<Result> resultExprs = genItem.getResultExprs();
        resultRanges.setModel(new SpinnerNumberModel(range, 1, resultExprs.size(), 1));
        ArrayList<MatchExpr> matchExprs = genItem.getMatchExprs();
        String[] matchNames = new String[matchExprs.size()];
        varnames = new ArrayList<>();
        if (manuelButton.isSelected()) {
            int row = 0;
            HashMap<String, String> vars = new HashMap<>();
            for (int i = 0; i < matchNames.length; i++) {
                MatchExpr matchExpr = matchExprs.get(i);
                matchNames[i] = matchExpr.getRegex();
                for (Map.Entry<Expression, String> entry : matchExpr.getVars().entrySet()) {
                    try {
                        String e = entry.getKey().toString(syntaxWrite);
                        vars.put(e, entry.getValue());
                        if (!varnames.contains(e)) {
                            varnames.add(e);
                        }
                    } catch (Exception ex) {
                        Exceptions.printStackTrace(ex);
                    }
                }
            }
            for (String var : varnames) {
                varsTable.setValueAt(var, row, 0);
                varsTable.setValueAt(vars.get(var), row, 2);
                row++;
            }
        }
        if (range < resultExprs.size() + 1) {
            String result = "";
            result += resultExprs.get(range - 1);
            resultField.setText(result);
        }
        matchesBox.setModel(new DefaultComboBoxModel(matchNames));
        valueField.setText("");
        varsToExprs.clear();
        resultReady = false;
    }

  private void generatorsBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatorsBoxActionPerformed
      int index = generatorsBox.getSelectedIndex();
      generator = generators.get(index);
      updateGenerator(generator);
  }//GEN-LAST:event_generatorsBoxActionPerformed

  private void valueFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueFieldActionPerformed
      int range = matchesBox.getSelectedIndex();
      if (range != -1) {
          try {
              MatchExpr matchExpr = genItem.getMatchExprs().get(range);
              String e = valueField.getText().trim();
              Expression expr = new Expression(e, syntax);
              ArrayList<Integer> childList = new ArrayList<>(); // TODO : replacer plus haut
              ArrayList<int[]> parentList = new ArrayList<>();
              ExprNode en = new ExprNode(expr, childList, parentList, exprNodes);
              int i = exprNodes.indexOf(en);
              if (i != -1) { // expression valide
                  en = exprNodes.get(i).copy();
                  if (matchExpr.checkExpr(en, varsToExprs, syntax)) {
                      //en.getParentList().add(i);  à changer
                      if (range + 1 < matchesBox.getItemCount()) {
                          matchesBox.setSelectedIndex(range + 1);
                      } else { // check results
                          int index = (Integer) resultRanges.getValue() - 1;
                          Result result = genItem.getResultExprs().get(index);
                          ExprNode en1 = result.addExpr(en, varsToExprs, syntax, exprNodes);
                          resultField.setText(en1.getE().toString(syntaxWrite));
                          resultReady = true;
                      }
                      if (manuelButton.isSelected()) {
                          for (Map.Entry<Expression, Expression> entry : varsToExprs.entrySet()) {
                              String key = entry.getKey().toString(syntaxWrite);
                              String val = entry.getValue().toString(syntaxWrite);
                              int row = varnames.indexOf(key);
                              if (row != -1) {
                                  varsTable.setValueAt(val, row, 1);
                              }
                          }
                      }
                  }
              }
          } catch (Exception ex) {
              Exceptions.printStackTrace(ex);
          }
      }
  }//GEN-LAST:event_valueFieldActionPerformed

  private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
      try {
          String eText = resultField.getText().trim();
          Expression e = null;
          if (genItem.getMatchExprs().isEmpty()) { // résultat direct
              int index = (Integer) resultRanges.getValue() - 1;
              e = new Expression(eText, syntax);
              Result result = genItem.getResultExprs().get(index);
              e.setType(result.getName());
              ArrayList<Integer> childList = new ArrayList<>();
              ArrayList<int[]> parentList = new ArrayList<>();
              exprNodes.add(new ExprNode(e, childList, parentList, exprNodes));
          } else if (resultReady) {
              e = exprNodes.get(exprNodes.size() - 1).getE();
          }
          if (e != null && tc != null) {
              int n = exprNodes.size();
              addToDocument(exprNodes.subList(n - 1, n));
          }
      } catch (Exception ex) {
          Exceptions.printStackTrace(ex);
      }
      resultField.setText("");
  }//GEN-LAST:event_okButtonActionPerformed

    private void addToDocument(List<ExprNode> newExprs) throws Exception {        
        Document document = tc.getDocument();
        NodeList nl = document.getElementsByTagName("expressions");
        Node root = nl.item(0);        
        for (ExprNode exprNode : newExprs) {
            String parents = "", enfants = "";
            for (int[] is : exprNode.getParentList()) {
                for (int i = 0; i < is.length; i++) {
                    String last = (i == is.length - 1)? " " : "-";
                    parents += is[i] + last;                    
                }
            }
            parents = parents.trim();
            for (Integer integer : exprNode.getChildList()) {
                enfants += integer + " ";
            }
            enfants = enfants.trim();
            Expression e = exprNode.getE();
            String etxt = e.toString(syntaxWrite);
            String type = e.getType();
            int index = exprNodes.indexOf(exprNode);
            Element expr = document.createElement("expr");
            expr.setAttribute("id", ""+index);
            expr.setAttribute("type", type);
            CDATASection txtnode = document.createCDATASection(etxt);
            expr.appendChild(txtnode);
            Element comment = document.createElement("comment");
            txtnode = document.createCDATASection("");
            expr.appendChild(txtnode);
            Element par = document.createElement("parents");
            txtnode = document.createCDATASection(parents);
            par.appendChild(txtnode);
            expr.appendChild(par);
            Element children = document.createElement("children");
            txtnode = document.createCDATASection(enfants);
            children.appendChild(txtnode);
            expr.appendChild(children);
            root.appendChild(expr);
        }
        tc.componentOpened();
    }

    private void resultRangesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_resultRangesStateChanged
        int range = (Integer) resultRanges.getValue();
        updateGenItem(genItem, range);
    }//GEN-LAST:event_resultRangesStateChanged

    private void levelSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_levelSpinnerStateChanged
        level = (int) levelSpinner.getValue();
    }//GEN-LAST:event_levelSpinnerStateChanged

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        if (autoButton.isEnabled()) {
            limit = (Integer) nbResultSpinner.getValue();
            SwingWorker worker = new SwingWorker<ArrayList<ExprNode>, String[]>() {
                @Override
                protected ArrayList<ExprNode> doInBackground() throws Exception {
                    level = 1;
                    maxsize = -1;
                    boolean once = exprNodes.isEmpty();
                    do {
                        for (GenItem genItem : generator.getGenItems()) {
                            if (!once && !genItem.isHasVars()) {
                                continue;
                            }
                            int oldsize = exprNodes.size();
                            int matchsize = genItem.getMatchExprs().size();
                            int[] genpList = new int[matchsize];
                            HashMap<Expression, Expression> evars = new HashMap<>();
                            ArrayList<Integer> childList = new ArrayList<>();
                            ArrayList<int[]> parentList = new ArrayList<>();
                            parentList.add(genpList);
                            ExprNode en = new ExprNode(null, childList, parentList, exprNodes);
                            genItem.generate(0, limit, level, syntax, en, evars, exprNodes);
                            List<ExprNode> newExprs = exprNodes.subList(oldsize, exprNodes.size());
                            addToDocument(newExprs);
                        }
                        once = false;
                    } while (exprNodes.size() < limit);
                    return exprNodes;
                }
            };
            worker.execute();
        }
    }//GEN-LAST:event_goButtonActionPerformed

    private void updateGenerator(Generator gen) {
        ArrayList<GenItem> genItems = gen.getGenItems();
        String[] itemStrings = new String[genItems.size()];
        for (int i = 0; i < itemStrings.length; i++) {
            itemStrings[i] = genItems.get(i).getName();
        }
        genItemBox.setModel(new DefaultComboBoxModel(itemStrings));
        genItem = genItems.get(0);
        updateGenItem(genItem, 1);
        genItemBox.repaint();
        resultRanges.repaint();
        matchesBox.repaint();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton autoButton;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JLabel commLabel;
    private javax.swing.JComboBox genItemBox;
    private javax.swing.JLabel genItemNameLabel;
    private javax.swing.JComboBox generatorsBox;
    private javax.swing.JButton goButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator;
    private javax.swing.JLabel levelLabel;
    private javax.swing.JSpinner levelSpinner;
    private javax.swing.JRadioButton manuelButton;
    private javax.swing.JCheckBox matchCheckBox;
    private javax.swing.JComboBox matchesBox;
    private javax.swing.JLabel matchesLabel;
    private javax.swing.JSpinner nbResultSpinner;
    private javax.swing.JLabel nbResultsLbl;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel rangesLabel;
    private javax.swing.JCheckBox refCheckBox;
    private javax.swing.JTextField resultField;
    private javax.swing.JLabel resultLabel;
    private javax.swing.JSpinner resultRanges;
    private javax.swing.JLabel title;
    private javax.swing.JCheckBox typeCheckBox;
    private javax.swing.JTextField valueField;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JLabel varsLabel;
    private javax.swing.JTable varsTable;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        varsToExprs = new HashMap<>();
        Set<TopComponent> tcs = TopComponent.getRegistry().getOpened();
          for (TopComponent topComponent : tcs) {
              if (topComponent instanceof MthTopComponent) {
                  tc = (MthTopComponent) topComponent;
                  exprNodes = tc.getExprNodes();
                  break;
              }
          }
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
