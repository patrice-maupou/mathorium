
matchBoth :         match :
C->(A->(B->A))      C->(A->(B->A))
(A->B)->(A->A)      (A->B)->(A->A)
E->(B->A)           A->A
A->A
B->A
A

matchBoth :
vars={A=A->(B->A)} expr=(A->B)->C)->(B->C)   svars={A=(A->B)->C, B=B->C}
comparaison entre A=A->(B->A) et A=(A->B)->C donne nvars={A=A->B} nsvars={C=B->A}

nvars corrige vars={A=(A->B)->(B->(A->B))} et nsvars corrige svars={B=B->(B->A)}

but : ((A->B)->(B->(A->B))) -> (B->(B->A))
-------------------------------------------------

<match name="LEFT" local="t" global="z"><![CDATA[u(v+w)]]><![CDATA[uv+uw)]]></match>
<result>z</result>

-------------------------------------------------
Types relatifs  C f:a->b , D g:a->b

<pattern><![CDATA[[C-E]'*]]>
    <type name="category">
        <pattern><![CDATA[[A-Z]\d*]]>
            <type name="obj">
        </pattern>
        <pattern child="s,t"><![CDATA[#category\s#[a-r]\d*'*:s->t]>
            <type name="arrow" value="obj,obj">
            </type>        
        </pattern>
    </type>
</pattern>

<rule key="COMPOSE" child="C g:C->B,C f:A->C"" group="(®_*)">
    <pattern node="COMPOSE"><![CDATA[g∘f:A->B]]>
        <type name="arrow" value="arrow,arrow"></type>        
      </pattern>
</rule>
    